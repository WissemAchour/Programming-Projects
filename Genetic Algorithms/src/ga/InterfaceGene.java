/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ga;

import java.util.ArrayList;
import javax.swing.JLabel;

/**
 *
 * @author Wissem
 */
public class InterfaceGene extends javax.swing.JFrame {

    /**
     * Creates new form InterfaceGene
     */
    public InterfaceGene() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Démarrer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 150, -1, -1));

        jTextField1.setText("100");
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 70, -1));

        jLabel1.setForeground(new java.awt.Color(204, 0, 51));
        jLabel1.setText("Nombre d'individus");
        jLabel1.setToolTipText("");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, 10));

        jLabel2.setForeground(new java.awt.Color(204, 0, 51));
        jLabel2.setText("Précision de la convergence");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, -1, -1));

        jTextField2.setText("0.001");
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, 80, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fonction 1", "Fonction 2", "Fonction 3", "Fonction 4", "Fonction 5", "Fonction 6", "Fonction 7", "Fonction 8", "Fonction 9", "Fonction 10" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, 100, -1));

        jLabel3.setForeground(new java.awt.Color(204, 0, 51));
        jLabel3.setText("Taux de mutation en %");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        jTextField3.setText("10");
        jPanel1.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 70, -1));

        jLabel4.setForeground(new java.awt.Color(204, 0, 51));
        jLabel4.setText("Solution");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 200, -1, -1));

        jLabel5.setForeground(new java.awt.Color(204, 0, 51));
        jLabel5.setText("Choix de la fonction");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, -1, -1));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Troncation", "Tournoi", " " }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 90, 100, -1));

        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("Choix de la méthode de sélection");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 70, -1, -1));

        jLabel7.setText("0");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 220, 180, 20));
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 130, -1));
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 130, -1));
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 190, -1, -1));
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, -1, -1));
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 230, -1, -1));
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 250, -1, -1));
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 270, -1, -1));
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 290, -1, -1));
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 310, -1, -1));
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 330, -1, -1));

        jLabel18.setForeground(new java.awt.Color(0, 0, 204));
        jLabel18.setText("Gene 10");
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, -1, -1));

        jLabel19.setForeground(new java.awt.Color(0, 0, 204));
        jLabel19.setText("Gene 1");
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        jLabel20.setForeground(new java.awt.Color(0, 0, 255));
        jLabel20.setText("Gene 2");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, -1));

        jLabel21.setForeground(new java.awt.Color(0, 0, 204));
        jLabel21.setText("Gene 3");
        jPanel1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, -1, -1));

        jLabel22.setForeground(new java.awt.Color(0, 0, 204));
        jLabel22.setText("Gene 4");
        jPanel1.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        jLabel23.setForeground(new java.awt.Color(0, 0, 204));
        jLabel23.setText("Gene 5");
        jPanel1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, -1, -1));

        jLabel24.setForeground(new java.awt.Color(0, 0, 204));
        jLabel24.setText("Gene 6");
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));

        jLabel25.setForeground(new java.awt.Color(0, 0, 204));
        jLabel25.setText("Gene 7");
        jPanel1.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, -1, -1));

        jLabel26.setForeground(new java.awt.Color(0, 0, 204));
        jLabel26.setText("Gene 8");
        jPanel1.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, -1, -1));

        jLabel27.setForeground(new java.awt.Color(0, 0, 204));
        jLabel27.setText("Gene 9");
        jPanel1.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        int nbPop = Integer.parseInt(jTextField1.getText().toString());

        double precision = Double.parseDouble(jTextField2.getText().toString());

        double tauxMutation = Double.parseDouble(jTextField3.getText().toString());


        int fontion = jComboBox1.getSelectedIndex();
        int selection = jComboBox2.getSelectedIndex() + 1;

        int menu = Integer.parseInt(selection + "" + fontion);
        System.out.println(fontion);

        ArrayList<Individu> enf = new ArrayList<>();

        boolean test = false;


        int k = 0;
        double v1 = 0;
        double v2 = 0;
        int i = 0;
        OperateurGenitiques op; //= new OperateurGenitiques(1, true);
        Population pop;
        Population p;
        ArrayList<JLabel> labels = new ArrayList<>();
        ArrayList<Double> lesgenes = new ArrayList<>();
        labels.add(jLabel8);
        labels.add(jLabel9);
        labels.add(jLabel10);
        labels.add(jLabel11);
        labels.add(jLabel12);
        labels.add(jLabel13);
        labels.add(jLabel14);
        labels.add(jLabel15);
        labels.add(jLabel16);
        labels.add(jLabel17);
        switch (menu) {

            case 10:

                while (test == false) {
                    op = new OperateurGenitiques(2, -1.5, 1.5, 1, true);
                    pop = new Population(nbPop, true, 2, -1.5, 1.5, 1);
                    p = new Population(nbPop, true, 2, -1.5, 1.5, 1);
                    enf.clear();
                    v1 = pop.getFittest(true).getValue(1);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for (i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.troncation(p, true, 5), op.troncation(p, true, 5));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(true);
                    System.out.println("Fittest= " + wiss.getValue(1));
                    v2 = wiss.getValue(1);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;

                        lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");



                }
                System.out.println("Solution trouvée!!!");
                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");



                for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");

                }

                break;


            case 20:

                pop = new Population(nbPop, true, 2, -1.5, 1.5, 1);
                p = new Population(nbPop, true, 2, -1.5, 1.5, 1);
                op = new OperateurGenitiques(2, -1.5, 1.5, 1, true);

                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(true).getValue(1);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for (i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.tournoi(p), op.tournoi(p));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(true);
                    System.out.println("Fittest= " + wiss.getValue(1));
                    v2 = wiss.getValue(1);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                        lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");
                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");

                for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }


                break;

            //unité nb fct et decimal c'est la meth de select
            case 11:
                pop = new Population(nbPop, true, 2, -3, 3, 2);
                p = new Population(nbPop, true, 2, -3, 3, 2);
                op = new OperateurGenitiques(2, -3, 3, 2, false);

                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(false).getValue(2);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.troncation(p, false, 5), op.troncation(p, false, 5));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(false);
                    System.out.println("Fittest= " + wiss.getValue(2));
                    v2 = wiss.getValue(2);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                        lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                 for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;

            case 21:
                pop = new Population(nbPop, true, 2, -3, 3, 2);
                p = new Population(nbPop, true, 2, -3, 3, 2);
                op = new OperateurGenitiques(2, -3, 3, 2, false);

                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(false).getValue(2);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.tournoi(p), op.tournoi(p));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(false);
                    System.out.println("Fittest= " + wiss.getValue(2));
                    v2 = wiss.getValue(2);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                         lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                
                 for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;


            case 12:
                pop = new Population(nbPop, true, 5, -5, 1, 3);
                p = new Population(nbPop, true, 5, -5, 1, 3);
                op = new OperateurGenitiques(5, -5, 1, 3, false);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(false).getValue(3);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.troncation(p, false, 5), op.troncation(p, false, 5));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(false);
                    System.out.println("Fittest= " + wiss.getValue(3));
                    v2 = wiss.getValue(3);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                         lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                 for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;

            case 22:
                pop = new Population(nbPop, true, 5, -5, 1, 3);
                p = new Population(nbPop, true, 5, -5, 1, 3);
                op = new OperateurGenitiques(5, -5, 1, 3, false);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(false).getValue(3);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.tournoi(p), op.tournoi(p));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(false);
                    System.out.println("Fittest= " + wiss.getValue(3));
                    v2 = wiss.getValue(3);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                        lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                 for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;



            case 13:
                pop = new Population(nbPop, true, 2, -10, 0, 4);
                p = new Population(nbPop, true, 2, -10, 10, 4);
                op = new OperateurGenitiques(2, -10, 0, 4, false);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(false).getValue(4);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.troncation(p, false, 5), op.troncation(p, false, 5));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(false);
                    System.out.println("Fittest= " + wiss.getValue(4));
                    v2 = wiss.getValue(4);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                         lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                
                  for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;



            case 23:
                pop = new Population(nbPop, true, 2, -10, 0, 4);
                p = new Population(nbPop, true, 2, -10, 10, 4);
                op = new OperateurGenitiques(2, -10, 0, 4, false);

                //System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(false).getValue(4);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.tournoi(p), op.tournoi(p));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(false);
                    System.out.println("Fittest= " + wiss.getValue(4));
                    v2 = wiss.getValue(4);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                        lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                
                  for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;


            case 14:
                pop = new Population(nbPop, true, 4, -3, 3, 5);
                p = new Population(nbPop, true, 4, -3, 3, 5);
                op = new OperateurGenitiques(4, -3, 3, 5, false);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(false).getValue(5);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.troncation(p, false, 5), op.troncation(p, false, 5));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(false);
                    System.out.println("Fittest= " + wiss.getValue(5));
                    v2 = wiss.getValue(5);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                        lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                 for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;


            case 24:
                pop = new Population(nbPop, true, 4, -3, 3, 5);
                p = new Population(nbPop, true, 4, -3, 3, 5);
                op = new OperateurGenitiques(4, -3, 3, 5, false);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(false).getValue(5);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.tournoi(p), op.tournoi(p));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(false);
                    System.out.println("Fittest= " + wiss.getValue(5));
                    v2 = wiss.getValue(5);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                        lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                 for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;


            case 15:
                pop = new Population(nbPop, true, 10, 0, 5, 6);
                p = new Population(nbPop, true, 10, 0, 5, 6);
                op = new OperateurGenitiques(10, 0, 5, 6, false);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(false).getValue(6);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.troncation(p, false, 5), op.troncation(p, false, 5));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(false);
                    System.out.println("Fittest= " + wiss.getValue(6));
                    v2 = wiss.getValue(6);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                        lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                  for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;


            case 25:
                pop = new Population(nbPop, true, 10, 0, 5, 6);
                p = new Population(nbPop, true, 10, 0, 5, 6);
                op = new OperateurGenitiques(10, 0, 5, 6, false);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(false).getValue(6);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.tournoi(p), op.tournoi(p));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(false);
                    System.out.println("Fittest= " + wiss.getValue(6));
                    v2 = wiss.getValue(6);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                        lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                 for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;


            case 16:
                pop = new Population(nbPop, true, 5, 0, 5, 7);
                p = new Population(nbPop, true, 5, 0, 5, 7);
                op = new OperateurGenitiques(5, 0, 5, 7, true);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(true).getValue(7);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.troncation(p, true, 5), op.troncation(p, true, 5));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(true);
                    System.out.println("Fittest= " + wiss.getValue(7));
                    v2 = wiss.getValue(7);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                        lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;


            case 26:
                pop = new Population(nbPop, true, 5, 0, 5, 7);
                p = new Population(nbPop, true, 5, 0, 5, 7);
                op = new OperateurGenitiques(5, 0, 5, 7, true);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(true).getValue(7);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.tournoi(p), op.tournoi(p));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(true);
                    System.out.println("Fittest= " + wiss.getValue(7));
                    v2 = wiss.getValue(7);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                         lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;


            case 17:
                pop = new Population(nbPop, true, 10, -1, 1, 8);
                p = new Population(nbPop, true, 10, -1, 1, 8);
                op = new OperateurGenitiques(10, -1, 1, 8, true);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(true).getValue(8);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.troncation(p, true, 5), op.troncation(p, true, 5));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(true);
                    System.out.println("Fittest= " + wiss.getValue(8));
                    v2 = wiss.getValue(8);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                        lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;

            case 27:
                pop = new Population(nbPop, true, 10, -1, 1, 8);
                p = new Population(nbPop, true, 10, -1, 1, 8);
                op = new OperateurGenitiques(10, -1, 1, 8, true);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(true).getValue(8);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.tournoi(p), op.tournoi(p));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(true);
                    System.out.println("Fittest= " + wiss.getValue(8));
                    v2 = wiss.getValue(8);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                        lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;


            case 18:
                pop = new Population(nbPop, true, 2, -5, 5, 9);
                p = new Population(nbPop, true, 2, -5, 5, 9);
                op = new OperateurGenitiques(2, -5, 5, 9, false);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(false).getValue(9);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.troncation(p, false, 5), op.troncation(p, false, 5));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(false);
                    System.out.println("Fittest= " + wiss.getValue(9));
                    v2 = wiss.getValue(9);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                        lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;


            case 28:
                pop = new Population(nbPop, true, 2, -5, 5, 9);
                p = new Population(nbPop, true, 2, -5, 5, 9);
                op = new OperateurGenitiques(2, -5, 5, 9, false);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(false).getValue(9);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.tournoi(p), op.tournoi(p));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(false);
                    System.out.println("Fittest= " + wiss.getValue(9));
                    v2 = wiss.getValue(9);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                        lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;


            case 19:
                pop = new Population(nbPop, true, 10, 2.9, 9.9, 10);
                p = new Population(nbPop, true, 10, 2.9, 9.9, 10);
                op = new OperateurGenitiques(10, 2.9, 9.9, 10, false);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(false).getValue(10);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.troncation(p, false, 5), op.troncation(p, false, 5));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(false);
                    System.out.println("Fittest= " + wiss.getValue(10));
                    v2 = wiss.getValue(10);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                         lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;

            case 29:
                pop = new Population(nbPop, true, 10, 2.9, 9.9, 10);
                p = new Population(nbPop, true, 10, 2.9, 9.9, 10);
                op = new OperateurGenitiques(10, 2.9, 9.9, 10, false);

                // System.out.println("nombre gene " + pop.Individus.get(0).genes.size());
                while (test == false) {

                    enf.clear();
                    v1 = pop.getFittest(false).getValue(10);
                    ArrayList<Individu> inter = new ArrayList<>();
                    inter.clear();

                    for ( i = 0; i < pop.taille(); i = i + 2) {

                        enf = op.croisement(op.tournoi(p), op.tournoi(p));

                        pop.ajouterIndividu(i, enf.get(0));
                        pop.ajouterIndividu(i + 1, enf.get(1));
                    }
                    op.mutation(pop, tauxMutation);


                    Individu wiss;
                    wiss = pop.getFittest(false);
                    System.out.println("Fittest= " + wiss.getValue(10));
                    v2 = wiss.getValue(10);

                    if (Math.abs(v2 - v1) < precision) {
                        test = true;
                         lesgenes.clear();

                        for (i = 0; i < wiss.tailleGenes(); i++) {
                            lesgenes.add(wiss.genes.get(i));
                        }
                    }
                    System.out.println("");


                }
                System.out.println("Solution trouvée!!!");

                //jTextField4.setText(v2 + "");
                jLabel7.setText(v2 + "");
                 for (i = 0; i < lesgenes.size(); i++) {
                    labels.get(i).setText(lesgenes.get(i) + "");
                }
                for (int j = i; i < 10; i++) {
                    labels.get(i).setText("");
                }
                break;

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceGene.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceGene.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceGene.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceGene.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfaceGene().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
